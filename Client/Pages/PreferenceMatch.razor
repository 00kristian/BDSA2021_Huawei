@page "/userpage/preferences"
@using Core
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AppState State

<div @onkeydown="@Enter">

<div class="padding-div" >
<h1>Your preferences</h1>

<p>Which days can you work?</p>
<div class="form-check">
  @foreach (WorkdayEnum day in Enum.GetValues(typeof(WorkdayEnum)))
    {
        <input type="checkbox" @bind="@Daytable[day]" />@day<br />
    }
</div>

<br>

<p>Which language do you prefer?</p>
  
  <EditForm Model="Lang">
   <InputRadioGroup @bind-Value="Lang">
	@foreach (LanguageEnum lang in Enum.GetValues(typeof(LanguageEnum)))
	{
	 <InputRadio Value="lang" /> @lang 
	}
   </InputRadioGroup>
  </EditForm>

<br>

<p>Do you prefer to work online or on-site?</p>
<EditForm Model="Loc">
   <InputRadioGroup @bind-Value="Loc">
	@foreach (LocationEnum loc in Enum.GetValues(typeof(LocationEnum)))
	{
	 <InputRadio Value="loc" />  @loc
	}
   </InputRadioGroup>
  </EditForm>
<br>

<p>Select the subjects you are interested in</p>
<div class="col-xl-6 mb-5">
  <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
      @bind-Value=@multipleValues Multiple="true" Placeholder="Select..." Data=@words TextProperty="Str" ValueProperty="Str"
    Style="width:300px" />
</div>
<br>
<button class="btn button" @onclick="Return">Submit</button>
<br>
</div>
</div>

@code{
  private IEnumerable<Keyword> words = new List<Keyword>();
    IEnumerable<string> multipleValues = new string[] {"AI"};
  public int UserId {get; set;}
  private PreferencesDTO Prefs;
  public Dictionary<WorkdayEnum, bool> Daytable = new Dictionary<WorkdayEnum, bool>();
  public LanguageEnum Lang;
  public LocationEnum Loc;
  protected override async Task OnInitializedAsync()
    {
      foreach (WorkdayEnum day in Enum.GetValues(typeof(WorkdayEnum))) {
        Daytable[day] = false;
      }
      words = (await Http.GetFromJsonAsync<List<string>>("api/Projects/Keywords"))!.Select(k => new Keyword(k)).ToList();
      if (!State.LoggedIn) {
        NavigationManager.NavigateTo($"{NavigationManager.BaseUri}home");
      }
        UserId = State.UserId;
        if (UserId != 0)
        {
            Prefs = await Http.GetFromJsonAsync<PreferencesDTO>($"api/Students/Preferences/{UserId}");

            foreach (WorkdayEnum d in Prefs.Workdays) {
              Daytable[d] = true;
            }
            Lang = Prefs.Language;
            Loc = Prefs.Location;
            multipleValues = Prefs.Keywords;
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            Return();
        }
    }
    private async void Return(){
      Prefs.Workdays = new List<WorkdayEnum>();
      foreach (var (k, v) in Daytable) {
        if (v) Prefs.Workdays.Add(k);
      }
        Prefs.Language = Lang;
        Prefs.Location = Loc;
        Prefs.Keywords = multipleValues.ToList();

        await Http.PutAsJsonAsync($"api/Students/Preferences/{UserId}", Prefs);

        var uri = $"{NavigationManager.BaseUri}userpage";
        NavigationManager.NavigateTo(uri);
    }

    class Keyword {
        public string Str {get; set;}

        public Keyword(string Str) {
            this.Str = Str;
        }
    }
}