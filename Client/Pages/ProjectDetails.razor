@page "/details/{projectId:int}"
@using Core
@using Radzen
@using Radzen.Blazor
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AppState State
@inject IJSRuntime JSRuntime
@inject DialogService DialogService

@if(Student == null){

}else{
 <h1>@project.Name</h1>
 <h5 class ="detail"><b class="detail2">Description: </b>@project.Description</h5>
 <h5 class ="detail"><b class="detail2">Due date: </b>@project.DueDate.ToShortDateString()</h5>
 <h5 class ="detail"><b class="detail2">Meeting day with supervisor: </b>@project.Meetingday</h5>
 <h5 class ="detail"><b class="detail2">Intended work hours: </b>@workHours[@project.IntendedWorkHours]</h5>
 <h5 class ="detail"><b class="detail2">Language: </b>@project.Language</h5>
 <h5 class ="detail"><b class="detail2">Location: </b>@project.Location</h5>
 <h5 class ="detail"><b class="detail2">Skill requirement: </b>@project.SkillRequirementDescription</h5>
 <h5 class ="detail"><b class="detail2">Supervisor: </b>@project.SupervisorName</h5>
 <h5 class ="detail"><b class="detail2">Format: </b>@(project.IsThesis ? "Thesis" : "Project")</h5>
 <table class='table'>
        <thead>
            <tr>
                <th><h5><b>Keywords</b></h5></th>
            </tr>
        </thead>
        <tbody>
            @foreach (string keyword in @project.Keywords)
            {
                <tr>
                    <td><h5><a href="searchresult/@keyword">@keyword</a></h5></td>
                </tr>
            }
        </tbody>
    </table>
@if(!((StudentDTO) Student).AppliedProjects.Contains(ProjectId)){
    <button style="margin-right: 2rem;" class="btn button" @onclick="ApplyForProject">Apply for project</button>
}
 <button class="btn button" @onclick="Return">Back to home</button>
}
 @code{
    [Parameter]
    public int ProjectId { get; set; }

    private ProjectDTO project;

    public int UserId {get; set;}

    private StudentDTO? Student;

    string[] workHours = new string[]{"less than 15 hours", "between 15 and 25 hours", "over 25 hour"};

    protected override async Task OnInitializedAsync(){
        project.Keywords = new List<string>();

      if (!State.LoggedIn) {
        NavigationManager.NavigateTo($"{NavigationManager.BaseUri}home");
      }
        UserId = State.UserId;
        if (UserId != 0)
        {
            Student = await Http.GetFromJsonAsync<StudentDTO>($"api/Students/{UserId}");
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        
        if (ProjectId != 0)
        {
            project = await Http.GetFromJsonAsync<ProjectDTO>($"api/Projects/{ProjectId}");
        }

        await base.OnParametersSetAsync();
    }

    private async void ApplyForProject(){
        if ((bool)(await DialogService.Confirm("Are you sure you want to apply for this project?",
         project.Name, new ConfirmOptions() { OkButtonText = "Apply", CancelButtonText = "No Thanks" }))) {
            ((StudentDTO) Student!).AppliedProjects.Add(project.Id);
            await Http.PutAsJsonAsync($"api/Students/{UserId}", Student);
            Return();
        }   

    }

     private void Return(){
         var uri = $"{NavigationManager.BaseUri}home";
        NavigationManager.NavigateTo(uri);
     }
}