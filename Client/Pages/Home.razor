@page "/"
@page "/Home"
@using Core
@using MyComponentNamespace
@inject NavigationManager NavigationManager
@inject AppState State
@inject HttpClient Http
@inject AuthenticationStateProvider Auth

<div class="padding-div">

<AuthorizeView>
    <Authorized>
        <PageTitle>Home</PageTitle>
        <h1>Recommended Projects</h1>
        <p>Here is an overview of the projects and theses, that matches your preferences best.</p>
    </Authorized>
    <NotAuthorized>
        <PageTitle>Project Bank</PageTitle>
        <p>You need to log in to see the projects</p>
    </NotAuthorized>
</AuthorizeView>

@if (projects == null) {
} else {
<Pager AllProjects="@projects" ShowRating="true"></Pager>
}

</div> 

@code{
    public IEnumerable<ProjectDTO>? projects;

    private StudentDTO student = new();

  protected override async Task OnInitializedAsync()
    {
        var authState = await Auth.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity!.IsAuthenticated)
        {
            if (!State.LoggedIn) {

                student.Name = user.Identity.Name!;
                student.Email = user.Identity.Name!.Split(" ")[0] + "@Microsoft.com";
                student.Degree = DegreeEnum.Bachelor;
                student.DOB = new DateTime(1990, 1, 1);
                student.University = UniversityEnum.ITU;
                student.AppliedProjects = new List<int>();

                var createResponse = await Http.PostAsJsonAsync<StudentDTO>("api/Students", student);

                var id = await createResponse.Content.ReadFromJsonAsync<int>();

                State.LoggedIn = true;
                State.UserId = id;

                if (createResponse.IsSuccessStatusCode)
                {
                    var uri = $"{NavigationManager.BaseUri}userpage";

                    NavigationManager.NavigateTo(uri);
                }
            }

            projects = (await Http.GetFromJsonAsync<IEnumerable<ProjectDTO>>($"api/Projects/Matching/{State.UserId}"))!
                .OrderByDescending(p => p.Rating).ToList();
        }
  }
    private void View(ProjectDTO project){
        var uri = $"{NavigationManager.BaseUri}details/{project.Id}";
        NavigationManager.NavigateTo(uri);

    }
}